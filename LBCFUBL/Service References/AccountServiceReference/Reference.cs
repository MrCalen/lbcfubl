//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LBCFUBL.AccountServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccountServiceReference.IAccount")]
    public interface IAccount {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/GetAccountsForLogin", ReplyAction="http://tempuri.org/IAccount/GetAccountsForLoginResponse")]
        LBCFUBL_WCF.DBO.Account[] GetAccountsForLogin(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/GetAccountsForLogin", ReplyAction="http://tempuri.org/IAccount/GetAccountsForLoginResponse")]
        System.Threading.Tasks.Task<LBCFUBL_WCF.DBO.Account[]> GetAccountsForLoginAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/GetAccountsForLoginBeforeDate", ReplyAction="http://tempuri.org/IAccount/GetAccountsForLoginBeforeDateResponse")]
        LBCFUBL_WCF.DBO.Account[] GetAccountsForLoginBeforeDate(string login, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/GetAccountsForLoginBeforeDate", ReplyAction="http://tempuri.org/IAccount/GetAccountsForLoginBeforeDateResponse")]
        System.Threading.Tasks.Task<LBCFUBL_WCF.DBO.Account[]> GetAccountsForLoginBeforeDateAsync(string login, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/GetAccountsForLoginAfterDate", ReplyAction="http://tempuri.org/IAccount/GetAccountsForLoginAfterDateResponse")]
        LBCFUBL_WCF.DBO.Account[] GetAccountsForLoginAfterDate(string login, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/GetAccountsForLoginAfterDate", ReplyAction="http://tempuri.org/IAccount/GetAccountsForLoginAfterDateResponse")]
        System.Threading.Tasks.Task<LBCFUBL_WCF.DBO.Account[]> GetAccountsForLoginAfterDateAsync(string login, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/CreateAccount", ReplyAction="http://tempuri.org/IAccount/CreateAccountResponse")]
        void CreateAccount(string login, float money, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/CreateAccount", ReplyAction="http://tempuri.org/IAccount/CreateAccountResponse")]
        System.Threading.Tasks.Task CreateAccountAsync(string login, float money, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/DeleteAccount", ReplyAction="http://tempuri.org/IAccount/DeleteAccountResponse")]
        bool DeleteAccount(string login, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/DeleteAccount", ReplyAction="http://tempuri.org/IAccount/DeleteAccountResponse")]
        System.Threading.Tasks.Task<bool> DeleteAccountAsync(string login, System.DateTime date);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountChannel : LBCFUBL.AccountServiceReference.IAccount, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountClient : System.ServiceModel.ClientBase<LBCFUBL.AccountServiceReference.IAccount>, LBCFUBL.AccountServiceReference.IAccount {
        
        public AccountClient() {
        }
        
        public AccountClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public LBCFUBL_WCF.DBO.Account[] GetAccountsForLogin(string login) {
            return base.Channel.GetAccountsForLogin(login);
        }
        
        public System.Threading.Tasks.Task<LBCFUBL_WCF.DBO.Account[]> GetAccountsForLoginAsync(string login) {
            return base.Channel.GetAccountsForLoginAsync(login);
        }
        
        public LBCFUBL_WCF.DBO.Account[] GetAccountsForLoginBeforeDate(string login, System.DateTime date) {
            return base.Channel.GetAccountsForLoginBeforeDate(login, date);
        }
        
        public System.Threading.Tasks.Task<LBCFUBL_WCF.DBO.Account[]> GetAccountsForLoginBeforeDateAsync(string login, System.DateTime date) {
            return base.Channel.GetAccountsForLoginBeforeDateAsync(login, date);
        }
        
        public LBCFUBL_WCF.DBO.Account[] GetAccountsForLoginAfterDate(string login, System.DateTime date) {
            return base.Channel.GetAccountsForLoginAfterDate(login, date);
        }
        
        public System.Threading.Tasks.Task<LBCFUBL_WCF.DBO.Account[]> GetAccountsForLoginAfterDateAsync(string login, System.DateTime date) {
            return base.Channel.GetAccountsForLoginAfterDateAsync(login, date);
        }
        
        public void CreateAccount(string login, float money, System.DateTime date) {
            base.Channel.CreateAccount(login, money, date);
        }
        
        public System.Threading.Tasks.Task CreateAccountAsync(string login, float money, System.DateTime date) {
            return base.Channel.CreateAccountAsync(login, money, date);
        }
        
        public bool DeleteAccount(string login, System.DateTime date) {
            return base.Channel.DeleteAccount(login, date);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAccountAsync(string login, System.DateTime date) {
            return base.Channel.DeleteAccountAsync(login, date);
        }
    }
}
